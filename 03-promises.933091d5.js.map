{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAgBJ,SAASC,cAAc,mBA6B7C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GACpBA,E,IArCPR,EAAKgB,iBAAiB,UAEtB,SAAwBC,GACtBA,EAAMC,iBACN,IAAIC,EAAQC,OAAOjB,EAAakB,OAC5BC,EAAOF,OAAOhB,EAAYiB,OAC1BE,EAASH,OAAOf,EAAcgB,OAGlC,GAAc,KAAVF,GAAyB,KAATG,GAA0B,KAAXC,EACjC,OAAOzB,EAAA0B,OAAOC,KAAK,kCAGrB,IAAK,IAAIC,EAAE,EAAGA,GAAGH,EAAQG,GAAG,EAE1BpB,EADWoB,EACaP,GACvBQ,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACnBV,EAAA0B,OAAOK,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE7DuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBV,EAAA0B,OAAOQ,QAAQ,sBAAuCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAE9DW,GAAOG,EAETL,EAAMgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst inputElDelay = document.querySelector('[name=\"delay\"]');\nconst inputElStep = document.querySelector('[name=\"step\"]');\nconst inputElAmount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener(\"submit\", onHandleSubmit);\n\nfunction onHandleSubmit(event) {\n  event.preventDefault();\n  let delay = Number(inputElDelay.value);\n  let step = Number(inputElStep.value);\n  let amount = Number(inputElAmount.value);\n  let position = 0;\n\n  if (delay === \"\" || step === \"\" || amount === \"\") {\n    return Notify.info(\"Please fill in all the fields!\");\n  }\n\n  for (let i=1; i<=amount; i+=1){\n    position = i;\n    createPromise(position, delay)\n    .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n   })\n   .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    delay+=step;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n        reject({ position, delay });\n    }, delay);\n  });\n}\n\n\n\n\n// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputElDelay","$ce04d3a99e08e73b$var$inputElStep","$ce04d3a99e08e73b$var$inputElAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","Notify","info","i","then","param","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.933091d5.js.map"}